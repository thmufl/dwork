type TimeInterval = 
 record {
   begin: Time;
   end: Time;
 };
type Time = int;
type ProfileInfo = 
 record {
   description: text;
   firstName: text;
   id: principal;
   lastName: text;
 };
type MarketInfo = 
 record {
   description: text;
   id: principal;
   name: text;
 };
type Market = 
 service {
   addProfile: (ProfileInfo) -> ();
   createConcept: (ConceptInfo) -> (nat32);
   createContract: (ContractInfo) -> (nat32);
   deleteConcept: (nat32) -> ();
   deleteContract: (nat32) -> ();
   deleteProfile: (principal) -> ();
   listConcepts: () -> (vec ConceptInfo) query;
   listContracts: () -> (vec ContractInfo) query;
   listProfiles: () -> (vec ProfileInfo) query;
   readConcept: (nat32) -> (opt ConceptInfo) query;
   readContract: (nat32) -> (opt ContractInfo) query;
   readInfo: () -> (MarketInfo) query;
   readProfile: (principal) -> (opt ProfileInfo) query;
   updateConcept: (ConceptInfo) -> (nat32);
   updateContract: (ContractInfo) -> (nat32);
   updateInfo: (MarketInfo) -> ();
   updateProfile: (ProfileInfo) -> (ProfileInfo);
 };
type ContractInfo = 
 record {
   date: TimeInterval;
   description: text;
   id: nat32;
   title: text;
 };
type ConceptInfo = 
 record {
   description: text;
   id: nat32;
   preferredLabel: text;
 };
service : (record {
             description: text;
             name: text;
           }) -> Market
